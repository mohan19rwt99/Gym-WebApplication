/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime.js';
import type { CreateUserRequest, CreateUserResponse, GetPropertyValuesResponse, SetUserPasswordRequest, SuccessResponse, UpdateOrganizationPropertiesRequest, UpdateUserRequest, UpdateUserResponse, User, UsersResponse } from '../models/index.js';
export interface CreateUserOperationRequest {
    createUserRequest?: CreateUserRequest;
}
export interface DeleteUserRequest {
    id: string;
    isDeleteProfile?: boolean;
}
export interface GetUserDataRequest {
    id: string;
    expand?: string | null;
}
export interface GetUserPropertyValuesRequest {
    userId: string;
}
export interface GetUsersRequest {
    pageSize?: number | null;
    userId?: string | null;
    nextToken?: string | null;
    email?: string | null;
    expand?: string | null;
}
export interface RefreshUserClaimsRequest {
    userId: string;
}
export interface SetUserPasswordOperationRequest {
    userId: string;
    setUserPasswordRequest: SetUserPasswordRequest;
}
export interface UpdateUserOperationRequest {
    id: string;
    updateUserRequest: UpdateUserRequest;
}
export interface UpdateUserFeatureFlagOverrideRequest {
    userId: string;
    featureFlagKey: string;
    value: string;
}
export interface UpdateUserPropertiesRequest {
    userId: string;
    updateOrganizationPropertiesRequest: UpdateOrganizationPropertiesRequest;
}
export interface UpdateUserPropertyRequest {
    userId: string;
    propertyKey: string;
    value: string;
}
/**
 *
 */
export declare class UsersApi extends runtime.BaseAPI {
    /**
     * Creates a user record and optionally zero or more identities for the user. An example identity could be the email address of the user.
     * Create User
     */
    createUserRaw(requestParameters: CreateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateUserResponse>>;
    /**
     * Creates a user record and optionally zero or more identities for the user. An example identity could be the email address of the user.
     * Create User
     */
    createUser(requestParameters?: CreateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateUserResponse>;
    /**
     * Delete a user record.
     * Delete User
     */
    deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Delete a user record.
     * Delete User
     */
    deleteUser(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Retrieve a user record.
     * Get User
     */
    getUserDataRaw(requestParameters: GetUserDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>>;
    /**
     * Retrieve a user record.
     * Get User
     */
    getUserData(requestParameters: GetUserDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User>;
    /**
     * Gets properties for an user by ID.
     * Get property values
     */
    getUserPropertyValuesRaw(requestParameters: GetUserPropertyValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPropertyValuesResponse>>;
    /**
     * Gets properties for an user by ID.
     * Get property values
     */
    getUserPropertyValues(requestParameters: GetUserPropertyValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPropertyValuesResponse>;
    /**
     * The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query string parameter.
     * List Users
     */
    getUsersRaw(requestParameters: GetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersResponse>>;
    /**
     * The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query string parameter.
     * List Users
     */
    getUsers(requestParameters?: GetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersResponse>;
    /**
     * Refreshes the user\'s claims and invalidates the current cache.
     * Refresh User Claims and Invalidate Cache
     */
    refreshUserClaimsRaw(requestParameters: RefreshUserClaimsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Refreshes the user\'s claims and invalidates the current cache.
     * Refresh User Claims and Invalidate Cache
     */
    refreshUserClaims(requestParameters: RefreshUserClaimsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Set user password.
     * Set User password
     */
    setUserPasswordRaw(requestParameters: SetUserPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Set user password.
     * Set User password
     */
    setUserPassword(requestParameters: SetUserPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Update a user record.
     * Update User
     */
    updateUserRaw(requestParameters: UpdateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateUserResponse>>;
    /**
     * Update a user record.
     * Update User
     */
    updateUser(requestParameters: UpdateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateUserResponse>;
    /**
     * Update user feature flag override.
     * Update User Feature Flag Override
     */
    updateUserFeatureFlagOverrideRaw(requestParameters: UpdateUserFeatureFlagOverrideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Update user feature flag override.
     * Update User Feature Flag Override
     */
    updateUserFeatureFlagOverride(requestParameters: UpdateUserFeatureFlagOverrideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Update property values.
     * Update Property values
     */
    updateUserPropertiesRaw(requestParameters: UpdateUserPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Update property values.
     * Update Property values
     */
    updateUserProperties(requestParameters: UpdateUserPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
    /**
     * Update property value.
     * Update Property value
     */
    updateUserPropertyRaw(requestParameters: UpdateUserPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>>;
    /**
     * Update property value.
     * Update Property value
     */
    updateUserProperty(requestParameters: UpdateUserPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse>;
}
