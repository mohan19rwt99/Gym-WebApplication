var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { BrowserSessionManager } from '../../session-managers/index.js';
import { AuthCodeWithPKCE } from '../../oauth2-flows/index.js';
import * as utilities from '../../utilities/index.js';
var createAuthCodeWithPKCEClient = function (options) {
    var _a;
    var featureFlags = utilities.featureFlags, tokenClaims = utilities.tokenClaims;
    var sessionManager = (_a = options.sessionManager) !== null && _a !== void 0 ? _a : new BrowserSessionManager();
    var client = new AuthCodeWithPKCE(options);
    /**
     * Method makes use of the `createAuthorizationURL` method of the AuthCodeWithPKCE
     * client above to return login url.
     * @param {LoginURLOptions} options
     * @returns {Promise<URL>} required authorization URL
     */
    var login = function (options) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, client.createAuthorizationURL(sessionManager, __assign({}, options))];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method makes use of the `createAuthorizationURL` method of the AuthCodeWithPKCE
     * client above to return registration url.
     * @param {RegisterURLOptions} options
     * @returns {Promise<URL>} required authorization URL
     */
    var register = function (options) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, client.createAuthorizationURL(sessionManager, __assign(__assign({}, options), { start_page: 'registration' }))];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method makes use of the `createAuthorizationURL` method of the AuthCodeWithPKCE
     * client above to return registration url with the `is_create_org` query param
     * set to true.
     * @param {CreateOrgURLOptions} options
     * @returns {Promise<URL>} required authorization URL
     */
    var createOrg = function (options) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, client.createAuthorizationURL(sessionManager, __assign(__assign({}, options), { start_page: 'registration', is_create_org: true }))];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method makes use of the `handleRedirectFromAuthDomain` method of the
     * `AuthCodeWithPKCE` client above to handle the redirection back to the app.
     * @param {URL} callbackURL
     * @returns {Promise<void>}
     */
    var handleRedirectToApp = function (callbackURL) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, client.handleRedirectFromAuthDomain(sessionManager, callbackURL)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); };
    /**
     * Method acts as a wrapper around the `isAuthenticated` method provided by the
     * `AuthCodeWithPKCE` client created above.
     * @returns {Promise<boolean>}
     */
    var isAuthenticated = function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, client.isAuthenticated(sessionManager)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method makes use of the `getUserProfile` method of the `AuthCodeWithPKCE` client
     * above to fetch the current user's information, raises exception if current user
     * is not authenticated.
     * @returns {Promise<UserType>}
     */
    var getUserProfile = function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, client.getUserProfile(sessionManager)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method extracts the current user's details from the current session, raises
     * exception if current user is not authenticated.
     * @returns {Promise<UserType>}
     */
    var getUser = function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, isAuthenticated()];
                case 1:
                    if (!(_a.sent())) {
                        throw new Error('Cannot get user details, no authentication credential found');
                    }
                    return [4 /*yield*/, utilities.getUserFromSession(sessionManager, client.tokenValidationDetails)];
                case 2: return [2 /*return*/, (_a.sent())];
            }
        });
    }); };
    /**
     * Method extracts the provided number feature flag from the access token in
     * the current session.
     * @param {string} code
     * @param {number} defaultValue
     * @returns {number} integer flag value
     */
    var getIntegerFlag = function (code, defaultValue) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, isAuthenticated()];
                case 1:
                    if (!(_a.sent())) {
                        throw new Error("Cannot return integer flag \"".concat(code, "\", no authentication credential found"));
                    }
                    return [4 /*yield*/, featureFlags.getIntegerFlag(sessionManager, code, client.tokenValidationDetails, defaultValue)];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method extracts the provided string feature flag from the access token in
     * the current session.
     * @param {string} code
     * @param {string} defaultValue
     * @returns {string} string flag value
     */
    var getStringFlag = function (code, defaultValue) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, isAuthenticated()];
                case 1:
                    if (!(_a.sent())) {
                        throw new Error("Cannot return string flag \"".concat(code, "\", no authentication credential found"));
                    }
                    return [4 /*yield*/, featureFlags.getStringFlag(sessionManager, code, client.tokenValidationDetails, defaultValue)];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method extracts the provided boolean feature flag from the access token in
     * the current session.
     * @param {string} code
     * @param {boolean} defaultValue
     * @returns {boolean} boolean flag value
     */
    var getBooleanFlag = function (code, defaultValue) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, isAuthenticated()];
                case 1:
                    if (!(_a.sent())) {
                        throw new Error("Cannot return boolean flag \"".concat(code, "\", no authentication credential found"));
                    }
                    return [4 /*yield*/, featureFlags.getBooleanFlag(sessionManager, code, client.tokenValidationDetails, defaultValue)];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method extracts the provided claim from the provided token type in the
     * current session.
     * @param {string} claim
     * @param {ClaimTokenType} type
     * @returns {unknown | null}
     */
    var getClaimValue = function (claim, type) {
        if (type === void 0) { type = 'access_token'; }
        return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, isAuthenticated()];
                    case 1:
                        if (!(_a.sent())) {
                            throw new Error("Cannot return claim \"".concat(claim, "\", no authentication credential found"));
                        }
                        return [4 /*yield*/, tokenClaims.getClaimValue(sessionManager, claim, type, client.tokenValidationDetails)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Method extracts the provided claim from the provided token type in the
     * current session, the returned object includes the provided claim.
     * @param {string} claim
     * @param {ClaimTokenType} type
     * @returns {{ name: string, value: unknown | null }}
     */
    var getClaim = function (claim, type) {
        if (type === void 0) { type = 'access_token'; }
        return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, isAuthenticated()];
                    case 1:
                        if (!(_a.sent())) {
                            throw new Error("Cannot return claim \"".concat(claim, "\", no authentication credential found"));
                        }
                        return [4 /*yield*/, tokenClaims.getClaim(sessionManager, claim, type, client.tokenValidationDetails)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Method returns the organization code from the current session and returns
     * a boolean in the returned object indicating if the provided permission is
     * present in the session.
     * @param {string} name
     * @returns {{ orgCode: string | null, isGranted: boolean }}
     */
    var getPermission = function (name) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, isAuthenticated()];
                case 1:
                    if (!(_a.sent())) {
                        throw new Error("Cannot return permission \"".concat(name, "\", no authentication credential found"));
                    }
                    return [4 /*yield*/, tokenClaims.getPermission(sessionManager, name, client.tokenValidationDetails)];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method extracts the organization code from the current session.
     * @returns {{ orgCode: string | null }}
     */
    var getOrganization = function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, isAuthenticated()];
                case 1:
                    if (!(_a.sent())) {
                        throw new Error('Cannot return user organization, no authentication credential found');
                    }
                    return [4 /*yield*/, tokenClaims.getOrganization(sessionManager, client.tokenValidationDetails)];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method extracts all organization codes from the id token in the current
     * session.
     * @returns {{ orgCodes: string[] }}
     */
    var getUserOrganizations = function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, isAuthenticated()];
                case 1:
                    if (!(_a.sent())) {
                        throw new Error('Cannot return user organizations, no authentication credential found');
                    }
                    return [4 /*yield*/, tokenClaims.getUserOrganizations(sessionManager, client.tokenValidationDetails)];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method extracts all the permission and the organization code in the access
     * token in the current session.
     * @returns {{ permissions: string[], orgCode: string | null }}
     */
    var getPermissions = function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, isAuthenticated()];
                case 1:
                    if (!(_a.sent())) {
                        throw new Error('Cannot return user permissions, no authentication credential found');
                    }
                    return [4 /*yield*/, tokenClaims.getPermissions(sessionManager, client.tokenValidationDetails)];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method makes use of the `getToken` of the `AuthCodeWithPKCE` client above
     * to return the access token from the current session.
     * @returns {Promise<string>}
     */
    var getToken = function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, client.getToken(sessionManager)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method makes user of the `refreshTokens` method of the `AuthCodeWithPKCE` client
     * to use the refresh token to get new tokens
     * @returns {Promise<OAuth2CodeExchangeResponse>}
     */
    var refreshTokens = function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, client.refreshTokens(sessionManager)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method extracts the provided feature flag from the access token in the
     * current session.
     * @param {string} code
     * @param {FlagType[keyof FlagType]} defaultValue
     * @param {keyof FlagType} type
     * @returns {GetFlagType}
     */
    var getFlag = function (code, defaultValue, type) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, isAuthenticated()];
                case 1:
                    if (!(_a.sent())) {
                        throw new Error("Cannot return flag \"".concat(code, "\", no authentication credential found"));
                    }
                    return [4 /*yield*/, featureFlags.getFlag(sessionManager, code, client.tokenValidationDetails, defaultValue, type)];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method clears the current session and returns the logout URL, redirecting
     * to which will clear the user's session on the authorization server.
     * @returns {URL}
     */
    var logout = function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, sessionManager.destroySession()];
                case 1:
                    _a.sent();
                    return [2 /*return*/, new URL(client.logoutEndpoint)];
            }
        });
    }); };
    return {
        getUserOrganizations: getUserOrganizations,
        handleRedirectToApp: handleRedirectToApp,
        isAuthenticated: isAuthenticated,
        getOrganization: getOrganization,
        getBooleanFlag: getBooleanFlag,
        getIntegerFlag: getIntegerFlag,
        getUserProfile: getUserProfile,
        getPermissions: getPermissions,
        getPermission: getPermission,
        getClaimValue: getClaimValue,
        getStringFlag: getStringFlag,
        createOrg: createOrg,
        getClaim: getClaim,
        getToken: getToken,
        refreshTokens: refreshTokens,
        register: register,
        getUser: getUser,
        getFlag: getFlag,
        logout: logout,
        login: login,
    };
};
export default createAuthCodeWithPKCEClient;
