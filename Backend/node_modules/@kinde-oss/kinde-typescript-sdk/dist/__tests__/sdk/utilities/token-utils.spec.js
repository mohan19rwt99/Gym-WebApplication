var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import * as mocks from '../../mocks';
import { commitTokensToSession, commitTokenToSession, isTokenExpired, getUserFromSession, } from '../../../sdk/utilities';
import { KindeSDKError, KindeSDKErrorCode } from '../../../sdk/exceptions';
import { importJWK } from 'jose';
describe('token-utils', function () {
    var domain = 'local-testing@kinde.com';
    var sessionManager = mocks.sessionManager;
    var validationDetails;
    beforeAll(function () { return __awaiter(void 0, void 0, void 0, function () {
        var publicKey;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, mocks.getKeys()];
                case 1:
                    publicKey = (_a.sent()).publicKey;
                    validationDetails = {
                        issuer: domain,
                        keyProvider: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, importJWK(publicKey, mocks.mockJwtAlg)];
                                case 1: return [2 /*return*/, _a.sent()];
                            }
                        }); }); },
                    };
                    return [2 /*return*/];
            }
        });
    }); });
    describe('commitTokensToMemory', function () {
        it('stores all provided tokens to memory', function () { return __awaiter(void 0, void 0, void 0, function () {
            var mockAccessToken, mockIdToken, tokenCollection, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, mocks.getMockAccessToken(domain)];
                    case 1:
                        mockAccessToken = (_d.sent()).token;
                        return [4 /*yield*/, mocks.getMockAccessToken(domain)];
                    case 2:
                        mockIdToken = (_d.sent()).token;
                        tokenCollection = {
                            refresh_token: 'refresh_token',
                            access_token: mockAccessToken,
                            id_token: mockIdToken,
                        };
                        return [4 /*yield*/, commitTokensToSession(sessionManager, tokenCollection, validationDetails)];
                    case 3:
                        _d.sent();
                        _a = expect;
                        return [4 /*yield*/, sessionManager.getSessionItem('refresh_token')];
                    case 4:
                        _a.apply(void 0, [_d.sent()]).toBe(tokenCollection.refresh_token);
                        _b = expect;
                        return [4 /*yield*/, sessionManager.getSessionItem('access_token')];
                    case 5:
                        _b.apply(void 0, [_d.sent()]).toBe(mockAccessToken);
                        _c = expect;
                        return [4 /*yield*/, sessionManager.getSessionItem('id_token')];
                    case 6:
                        _c.apply(void 0, [_d.sent()]).toBe(mockIdToken);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('commitTokenToMemory()', function () {
        afterEach(function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, sessionManager.destroySession()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        it('stores provided token to memory', function () { return __awaiter(void 0, void 0, void 0, function () {
            var mockAccessToken, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, mocks.getMockAccessToken(domain)];
                    case 1:
                        mockAccessToken = (_b.sent()).token;
                        return [4 /*yield*/, commitTokenToSession(sessionManager, mockAccessToken, 'access_token', validationDetails)];
                    case 2:
                        _b.sent();
                        _a = expect;
                        return [4 /*yield*/, sessionManager.getSessionItem('access_token')];
                    case 3:
                        _a.apply(void 0, [_b.sent()]).toBe(mockAccessToken);
                        return [2 /*return*/];
                }
            });
        }); });
        it('throws exception if attempting to store invalid token', function () { return __awaiter(void 0, void 0, void 0, function () {
            var mockAccessToken, commitTokenFn;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, mocks.getMockAccessToken(domain, true)];
                    case 1:
                        mockAccessToken = (_a.sent()).token;
                        commitTokenFn = function () { return __awaiter(void 0, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, commitTokenToSession(sessionManager, mockAccessToken, 'access_token', validationDetails)];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); };
                        return [4 /*yield*/, expect(commitTokenFn).rejects.toBeInstanceOf(KindeSDKError)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, expect(commitTokenFn).rejects.toHaveProperty('errorCode', KindeSDKErrorCode.INVALID_TOKEN_MEMORY_COMMIT)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        it('stores user information if provide token is an id token', function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a, mockIdToken, idTokenPayload, storedUser, expectedUser, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, mocks.getMockIdToken(domain)];
                    case 1:
                        _a = _c.sent(), mockIdToken = _a.token, idTokenPayload = _a.payload;
                        return [4 /*yield*/, commitTokenToSession(sessionManager, mockIdToken, 'id_token', validationDetails)];
                    case 2:
                        _c.sent();
                        return [4 /*yield*/, getUserFromSession(sessionManager, validationDetails)];
                    case 3:
                        storedUser = _c.sent();
                        expectedUser = {
                            family_name: idTokenPayload.family_name,
                            given_name: idTokenPayload.given_name,
                            email: idTokenPayload.email,
                            id: idTokenPayload.sub,
                            picture: null,
                        };
                        _b = expect;
                        return [4 /*yield*/, sessionManager.getSessionItem('id_token')];
                    case 4:
                        _b.apply(void 0, [_c.sent()]).toBe(mockIdToken);
                        expect(storedUser).toStrictEqual(expectedUser);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('isTokenExpired()', function () {
        it('returns true if null is provided as argument', function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = expect;
                        return [4 /*yield*/, isTokenExpired(null, validationDetails)];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).toBe(true);
                        return [2 /*return*/];
                }
            });
        }); });
        it('returns true if provided token is expired', function () { return __awaiter(void 0, void 0, void 0, function () {
            var mockAccessToken, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, mocks.getMockAccessToken(domain, true)];
                    case 1:
                        mockAccessToken = (_b.sent()).token;
                        _a = expect;
                        return [4 /*yield*/, isTokenExpired(mockAccessToken, validationDetails)];
                    case 2:
                        _a.apply(void 0, [_b.sent()]).toBe(true);
                        return [2 /*return*/];
                }
            });
        }); });
        it('returns true if provided token is missing "exp" claim', function () { return __awaiter(void 0, void 0, void 0, function () {
            var mockAccessToken, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, mocks.getMockAccessToken(domain, true)];
                    case 1:
                        mockAccessToken = (_b.sent()).token;
                        _a = expect;
                        return [4 /*yield*/, isTokenExpired(mockAccessToken, validationDetails)];
                    case 2:
                        _a.apply(void 0, [_b.sent()]).toBe(true);
                        return [2 /*return*/];
                }
            });
        }); });
        it('returns false if provided token is not expired', function () { return __awaiter(void 0, void 0, void 0, function () {
            var mockAccessToken, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, mocks.getMockAccessToken(domain)];
                    case 1:
                        mockAccessToken = (_b.sent()).token;
                        _a = expect;
                        return [4 /*yield*/, isTokenExpired(mockAccessToken, validationDetails)];
                    case 2:
                        _a.apply(void 0, [_b.sent()]).toBe(false);
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
