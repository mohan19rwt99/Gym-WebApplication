"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetUserPasswordRequestToJSON = exports.SetUserPasswordRequestFromJSONTyped = exports.SetUserPasswordRequestFromJSON = exports.instanceOfSetUserPasswordRequest = exports.SetUserPasswordRequestSaltPositionEnum = exports.SetUserPasswordRequestHashingMethodEnum = void 0;
var runtime_js_1 = require("../runtime.js");
/**
 * @export
 */
exports.SetUserPasswordRequestHashingMethodEnum = {
    Bcrypt: 'bcrypt',
    Crypt: 'crypt',
    Md5: 'md5',
    Wordpress: 'wordpress'
};
/**
 * @export
 */
exports.SetUserPasswordRequestSaltPositionEnum = {
    Prefix: 'prefix',
    Suffix: 'suffix'
};
/**
 * Check if a given object implements the SetUserPasswordRequest interface.
 */
function instanceOfSetUserPasswordRequest(value) {
    var isInstance = true;
    isInstance = isInstance && "hashedPassword" in value;
    return isInstance;
}
exports.instanceOfSetUserPasswordRequest = instanceOfSetUserPasswordRequest;
function SetUserPasswordRequestFromJSON(json) {
    return SetUserPasswordRequestFromJSONTyped(json, false);
}
exports.SetUserPasswordRequestFromJSON = SetUserPasswordRequestFromJSON;
function SetUserPasswordRequestFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'hashedPassword': json['hashed_password'],
        'hashingMethod': !(0, runtime_js_1.exists)(json, 'hashing_method') ? undefined : json['hashing_method'],
        'salt': !(0, runtime_js_1.exists)(json, 'salt') ? undefined : json['salt'],
        'saltPosition': !(0, runtime_js_1.exists)(json, 'salt_position') ? undefined : json['salt_position'],
        'isTemporaryPassword': !(0, runtime_js_1.exists)(json, 'is_temporary_password') ? undefined : json['is_temporary_password'],
    };
}
exports.SetUserPasswordRequestFromJSONTyped = SetUserPasswordRequestFromJSONTyped;
function SetUserPasswordRequestToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'hashed_password': value.hashedPassword,
        'hashing_method': value.hashingMethod,
        'salt': value.salt,
        'salt_position': value.saltPosition,
        'is_temporary_password': value.isTemporaryPassword,
    };
}
exports.SetUserPasswordRequestToJSON = SetUserPasswordRequestToJSON;
