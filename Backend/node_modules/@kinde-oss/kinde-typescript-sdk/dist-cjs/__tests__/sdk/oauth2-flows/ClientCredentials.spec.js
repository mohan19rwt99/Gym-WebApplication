"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var jose_1 = require("jose");
var ClientCredentials_1 = require("../../../sdk/oauth2-flows/ClientCredentials");
var utilities_1 = require("../../../sdk/utilities");
var version_1 = require("../../../sdk/version");
var mocks = __importStar(require("../../mocks"));
describe('ClientCredentials', function () {
    var clientConfig = {
        authDomain: 'https://local-testing@kinde.com',
        logoutRedirectURL: 'http://app-domain.com',
        clientSecret: (0, utilities_1.generateRandomString)(50),
        clientId: 'client-id',
    };
    var sessionManager = mocks.sessionManager;
    describe('new ClientCredentials()', function () {
        it('can construct ClientCredentials instance', function () {
            expect(function () { return new ClientCredentials_1.ClientCredentials(clientConfig); }).not.toThrowError();
        });
    });
    describe('getToken()', function () {
        var tokenEndpoint = "".concat(clientConfig.authDomain, "/oauth2/token");
        var validationDetails;
        beforeAll(function () { return __awaiter(void 0, void 0, void 0, function () {
            var publicKey;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, mocks.getKeys()];
                    case 1:
                        publicKey = (_a.sent()).publicKey;
                        validationDetails = {
                            issuer: clientConfig.authDomain,
                            keyProvider: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, (0, jose_1.importJWK)(publicKey, mocks.mockJwtAlg)];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            }); }); },
                        };
                        clientConfig.jwks = { keys: [publicKey] };
                        return [2 /*return*/];
                }
            });
        }); });
        var body = new URLSearchParams({
            grant_type: 'client_credentials',
            client_id: clientConfig.clientId,
            client_secret: clientConfig.clientSecret,
        });
        var headers = new Headers();
        headers.append.apply(headers, __spreadArray([], __read((0, version_1.getSDKHeader)()), false));
        headers.append('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
        afterEach(function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, sessionManager.destroySession()];
                    case 1:
                        _a.sent();
                        mocks.fetchClient.mockClear();
                        return [2 /*return*/];
                }
            });
        }); });
        it('throws an exception when fetching access token returns an error response', function () { return __awaiter(void 0, void 0, void 0, function () {
            var errorDescription, client;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        errorDescription = 'error_description';
                        mocks.fetchClient.mockResolvedValue({
                            json: function () {
                                var _a;
                                return (_a = {
                                        error: 'error'
                                    },
                                    _a[errorDescription] = errorDescription,
                                    _a);
                            },
                        });
                        client = new ClientCredentials_1.ClientCredentials(clientConfig);
                        return [4 /*yield*/, expect(function () { return __awaiter(void 0, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, client.getToken(sessionManager)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }).rejects.toThrow(errorDescription)];
                    case 1:
                        _a.sent();
                        expect(mocks.fetchClient).toHaveBeenCalled();
                        return [2 /*return*/];
                }
            });
        }); });
        it('return access token if an unexpired token is available in memory', function () { return __awaiter(void 0, void 0, void 0, function () {
            var authDomain, mockAccessToken, client, accessToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        authDomain = clientConfig.authDomain;
                        return [4 /*yield*/, mocks.getMockAccessToken(authDomain)];
                    case 1:
                        mockAccessToken = (_a.sent()).token;
                        return [4 /*yield*/, (0, utilities_1.commitTokenToSession)(sessionManager, mockAccessToken, 'access_token', validationDetails)];
                    case 2:
                        _a.sent();
                        client = new ClientCredentials_1.ClientCredentials(clientConfig);
                        return [4 /*yield*/, client.getToken(sessionManager)];
                    case 3:
                        accessToken = _a.sent();
                        expect(mocks.fetchClient).not.toHaveBeenCalled();
                        expect(accessToken).toBe(mockAccessToken);
                        return [2 /*return*/];
                }
            });
        }); });
        it('fetches an access token if no access token is available in memory', function () { return __awaiter(void 0, void 0, void 0, function () {
            var mockAccessToken, client, accessToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, mocks.getMockAccessToken(clientConfig.authDomain)];
                    case 1:
                        mockAccessToken = (_a.sent()).token;
                        mocks.fetchClient.mockResolvedValue({
                            json: function () { return ({ access_token: mockAccessToken }); },
                        });
                        client = new ClientCredentials_1.ClientCredentials(clientConfig);
                        return [4 /*yield*/, client.getToken(sessionManager)];
                    case 2:
                        accessToken = _a.sent();
                        expect(accessToken).toBe(mockAccessToken);
                        expect(mocks.fetchClient).toHaveBeenCalledTimes(1);
                        return [2 /*return*/];
                }
            });
        }); });
        it('fetches an access token if available access token is expired', function () { return __awaiter(void 0, void 0, void 0, function () {
            var expiredMockAccessToken, mockAccessToken, client, accessToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, mocks.getMockAccessToken(clientConfig.authDomain, true)];
                    case 1:
                        expiredMockAccessToken = (_a.sent()).token;
                        return [4 /*yield*/, sessionManager.setSessionItem('access_token', expiredMockAccessToken)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, mocks.getMockAccessToken(clientConfig.authDomain)];
                    case 3:
                        mockAccessToken = (_a.sent()).token;
                        mocks.fetchClient.mockResolvedValue({
                            json: function () { return ({ access_token: mockAccessToken }); },
                        });
                        client = new ClientCredentials_1.ClientCredentials(clientConfig);
                        return [4 /*yield*/, client.getToken(sessionManager)];
                    case 4:
                        accessToken = _a.sent();
                        expect(accessToken).toBe(mockAccessToken);
                        expect(mocks.fetchClient).toHaveBeenCalledTimes(1);
                        expect(mocks.fetchClient).toHaveBeenCalledWith(tokenEndpoint, {
                            method: 'POST',
                            headers: headers,
                            body: body,
                        });
                        return [2 /*return*/];
                }
            });
        }); });
        it('overrides scope and audience in token request body is provided', function () { return __awaiter(void 0, void 0, void 0, function () {
            var mockAccessToken, expectedScope, expectedAudience, client, expectedBody;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, mocks.getMockAccessToken(clientConfig.authDomain)];
                    case 1:
                        mockAccessToken = (_a.sent()).token;
                        mocks.fetchClient.mockResolvedValue({
                            json: function () { return ({ access_token: mockAccessToken }); },
                        });
                        expectedScope = 'test-scope';
                        expectedAudience = 'test-audience';
                        client = new ClientCredentials_1.ClientCredentials(__assign(__assign({}, clientConfig), { audience: expectedAudience, scope: expectedScope }));
                        expectedBody = new URLSearchParams({
                            grant_type: 'client_credentials',
                            client_id: clientConfig.clientId,
                            client_secret: clientConfig.clientSecret,
                            scope: expectedScope,
                            audience: expectedAudience,
                        });
                        return [4 /*yield*/, client.getToken(sessionManager)];
                    case 2:
                        _a.sent();
                        expect(mocks.fetchClient).toHaveBeenCalledWith(tokenEndpoint, {
                            method: 'POST',
                            headers: headers,
                            body: expectedBody,
                        });
                        return [2 /*return*/];
                }
            });
        }); });
        it('commits access token to memory, when a new one is fetched', function () { return __awaiter(void 0, void 0, void 0, function () {
            var mockAccessToken, client, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, mocks.getMockAccessToken(clientConfig.authDomain)];
                    case 1:
                        mockAccessToken = _b.sent();
                        mocks.fetchClient.mockResolvedValue({
                            json: function () { return ({ access_token: mockAccessToken.token }); },
                        });
                        client = new ClientCredentials_1.ClientCredentials(clientConfig);
                        return [4 /*yield*/, client.getToken(sessionManager)];
                    case 2:
                        _b.sent();
                        expect(mocks.fetchClient).toHaveBeenCalledTimes(1);
                        _a = expect;
                        return [4 /*yield*/, sessionManager.getSessionItem('access_token')];
                    case 3:
                        _a.apply(void 0, [_b.sent()]).toBe(mockAccessToken.token);
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
