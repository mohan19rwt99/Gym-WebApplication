"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var mocks = __importStar(require("../../mocks"));
var utilities_1 = require("../../../sdk/utilities");
var jose_1 = require("jose");
describe('feature-flags', function () {
    var mockAccessToken;
    var sessionManager = mocks.sessionManager;
    var validationDetails;
    beforeAll(function () { return __awaiter(void 0, void 0, void 0, function () {
        var publicKey;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, mocks.getKeys()];
                case 1:
                    publicKey = (_a.sent()).publicKey;
                    validationDetails = {
                        issuer: '',
                        keyProvider: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, (0, jose_1.importJWK)(publicKey, mocks.mockJwtAlg)];
                                case 1: return [2 /*return*/, _a.sent()];
                            }
                        }); }); },
                    };
                    return [2 /*return*/];
            }
        });
    }); });
    beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, mocks.getMockAccessToken()];
                case 1:
                    mockAccessToken = _a.sent();
                    return [4 /*yield*/, sessionManager.setSessionItem('access_token', mockAccessToken.token)];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    afterEach(function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, sessionManager.destroySession()];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    describe('getFlag', function () {
        it('throws error if no flag is found no defaultValue is given', function () { return __awaiter(void 0, void 0, void 0, function () {
            var code;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        code = 'non-existant-code';
                        return [4 /*yield*/, expect(function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, (0, utilities_1.getFlag)(sessionManager, code, validationDetails)];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            }); }); }).rejects.toThrowError(new Error("Flag ".concat(code, " was not found, and no default value has been provided")))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        it('throw error if provided type is different from typeof of found flag', function () { return __awaiter(void 0, void 0, void 0, function () {
            var featureFlags, code, flag;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        featureFlags = mockAccessToken.payload.feature_flags;
                        code = 'is_dark_mode';
                        flag = featureFlags[code];
                        return [4 /*yield*/, expect(function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, (0, utilities_1.getFlag)(sessionManager, code, validationDetails, true, 's')];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            }); }); }).rejects.toThrowError(new Error("Flag ".concat(code, " is of type ").concat(utilities_1.FlagDataType[flag.t], ", expected type is ").concat(utilities_1.FlagDataType.s)))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        it('should not throw error for falsy default value which is not `undefined`', function () {
            var code = 'non-existant-code';
            var getFlagFnArray = [
                function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, utilities_1.getFlag)(sessionManager, code, validationDetails, false, 'b')];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                }); }); },
                function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, utilities_1.getFlag)(sessionManager, code, validationDetails, '', 's')];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                }); }); },
                function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, utilities_1.getFlag)(sessionManager, code, validationDetails, 0, 'i')];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                }); }); },
            ];
            getFlagFnArray.forEach(function (getFlagFn) {
                expect(getFlagFn).not.toThrow();
            });
        });
        it('provide result contains no type if default-value is used', function () { return __awaiter(void 0, void 0, void 0, function () {
            var defaultValue, code, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        defaultValue = 'default-value';
                        code = 'non-existant-code';
                        _a = expect;
                        return [4 /*yield*/, (0, utilities_1.getFlag)(sessionManager, code, validationDetails, defaultValue)];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).toStrictEqual({
                            value: defaultValue,
                            is_default: true,
                            code: code,
                        });
                        return [2 /*return*/];
                }
            });
        }); });
        it('retrieves flag data for a defined feature flag', function () { return __awaiter(void 0, void 0, void 0, function () {
            var featureFlags, _a, _b, _c, _i, code, flag, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        featureFlags = mockAccessToken.payload.feature_flags;
                        _a = featureFlags;
                        _b = [];
                        for (_c in _a)
                            _b.push(_c);
                        _i = 0;
                        _e.label = 1;
                    case 1:
                        if (!(_i < _b.length)) return [3 /*break*/, 4];
                        _c = _b[_i];
                        if (!(_c in _a)) return [3 /*break*/, 3];
                        code = _c;
                        flag = featureFlags[code];
                        _d = expect;
                        return [4 /*yield*/, (0, utilities_1.getFlag)(sessionManager, code, validationDetails)];
                    case 2:
                        _d.apply(void 0, [_e.sent()]).toStrictEqual({
                            is_default: false,
                            value: flag.v,
                            type: utilities_1.FlagDataType[flag.t],
                            code: code,
                        });
                        _e.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
    });
});
