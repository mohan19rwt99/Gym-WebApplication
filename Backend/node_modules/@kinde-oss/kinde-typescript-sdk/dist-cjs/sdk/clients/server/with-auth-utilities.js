"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var utilities = __importStar(require("../../utilities/index.js"));
var withAuthUtilities = function (isAuthenticated, validationDetails) {
    var featureFlags = utilities.featureFlags, tokenClaims = utilities.tokenClaims;
    /**
     * Method extracts the provided number feature flag from the access token in
     * the current session.
     * @param {SessionManager} sessionManager
     * @param {string} code
     * @param {number} defaultValue
     * @returns {number} integer flag value
     */
    var getIntegerFlag = function (sessionManager, code, defaultValue) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, isAuthenticated(sessionManager)];
                case 1:
                    if (!(_a.sent())) {
                        throw new Error("Cannot return integer flag \"".concat(code, "\", no authentication credential found"));
                    }
                    return [4 /*yield*/, featureFlags.getIntegerFlag(sessionManager, code, validationDetails, defaultValue)];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method extracts the provided string feature flag from the access token in
     * the current session.
     * @param {SessionManager} sessionManager
     * @param {string} code
     * @param {string} defaultValue
     * @returns {string} string flag value
     */
    var getStringFlag = function (sessionManager, code, defaultValue) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, isAuthenticated(sessionManager)];
                case 1:
                    if (!(_a.sent())) {
                        throw new Error("Cannot return string flag \"".concat(code, "\", no authentication credential found"));
                    }
                    return [4 /*yield*/, featureFlags.getStringFlag(sessionManager, code, validationDetails, defaultValue)];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method extracts the provided boolean feature flag from the access token in
     * the current session.
     * @param {SessionManager} sessionManager
     * @param {string} code
     * @param {boolean} defaultValue
     * @returns {boolean} boolean flag value
     */
    var getBooleanFlag = function (sessionManager, code, defaultValue) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, isAuthenticated(sessionManager)];
                case 1:
                    if (!(_a.sent())) {
                        throw new Error("Cannot return boolean flag \"".concat(code, "\", no authentication credential found"));
                    }
                    return [4 /*yield*/, featureFlags.getBooleanFlag(sessionManager, code, validationDetails, defaultValue)];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method extracts the provided claim from the provided token type in the
     * current session.
     * @param {SessionManager} sessionManager
     * @param {string} claim
     * @param {ClaimTokenType} type
     * @returns {unknown | null}
     */
    var getClaimValue = function (sessionManager, claim, type) {
        if (type === void 0) { type = 'access_token'; }
        return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, isAuthenticated(sessionManager)];
                    case 1:
                        if (!(_a.sent())) {
                            throw new Error("Cannot return claim \"".concat(claim, "\", no authentication credential found"));
                        }
                        return [4 /*yield*/, tokenClaims.getClaimValue(sessionManager, claim, type, validationDetails)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Method extracts the provided claim from the provided token type in the
     * current session, the returned object includes the provided claim.
     * @param {SessionManager} sessionManager
     * @param {string} claim
     * @param {ClaimTokenType} type
     * @returns {{ name: string, value: unknown | null }}
     */
    var getClaim = function (sessionManager, claim, type) {
        if (type === void 0) { type = 'access_token'; }
        return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, isAuthenticated(sessionManager)];
                    case 1:
                        if (!(_a.sent())) {
                            throw new Error("Cannot return claim \"".concat(claim, "\", no authentication credential found"));
                        }
                        return [4 /*yield*/, tokenClaims.getClaim(sessionManager, claim, type, validationDetails)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Method returns the organization code from the current session and returns
     * a boolean in the returned object indicating if the provided permission is
     * present in the session.
     * @param {SessionManager} sessionManager
     * @param {string} name
     * @returns {{ orgCode: string | null, isGranted: boolean }}
     */
    var getPermission = function (sessionManager, name) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, isAuthenticated(sessionManager)];
                case 1:
                    if (!(_a.sent())) {
                        throw new Error("Cannot return permission \"".concat(name, "\", no authentication credential found"));
                    }
                    return [4 /*yield*/, tokenClaims.getPermission(sessionManager, name, validationDetails)];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method extracts the organization code from the current session.
     * @param {SessionManager} sessionManager
     * @returns {{ orgCode: string | null }}
     */
    var getOrganization = function (sessionManager) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, isAuthenticated(sessionManager)];
                case 1:
                    if (!(_a.sent())) {
                        throw new Error('Cannot return user organization, no authentication credential found');
                    }
                    return [4 /*yield*/, tokenClaims.getOrganization(sessionManager, validationDetails)];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method extracts all organization codes from the id token in the current
     * session.
     * @param {SessionManager} sessionManager
     * @returns {{ orgCodes: string[] }}
     */
    var getUserOrganizations = function (sessionManager) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, isAuthenticated(sessionManager)];
                case 1:
                    if (!(_a.sent())) {
                        throw new Error('Cannot return user organizations, no authentication credential found');
                    }
                    return [4 /*yield*/, tokenClaims.getUserOrganizations(sessionManager, validationDetails)];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method extracts all the permission and the organization code in the access
     * token in the current session.
     * @param {SessionManager} sessionManager
     * @returns {{ permissions: string[], orgCode: string | null }}
     */
    var getPermissions = function (sessionManager) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, isAuthenticated(sessionManager)];
                case 1:
                    if (!(_a.sent())) {
                        throw new Error('Cannot return user permissions, no authentication credential found');
                    }
                    return [4 /*yield*/, tokenClaims.getPermissions(sessionManager, validationDetails)];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method extracts the provided feature flag from the access token in the
     * current session.
     * @param {SessionManager} sessionManager
     * @param {string} code
     * @param {FlagType[keyof FlagType]} defaultValue
     * @param {keyof FlagType} type
     * @returns {GetFlagType}
     */
    var getFlag = function (sessionManager, code, defaultValue, type) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, isAuthenticated(sessionManager)];
                case 1:
                    if (!(_a.sent())) {
                        throw new Error("Cannot return flag \"".concat(code, "\", no authentication credential found"));
                    }
                    return [4 /*yield*/, featureFlags.getFlag(sessionManager, code, validationDetails, defaultValue, type)];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    return {
        getUserOrganizations: getUserOrganizations,
        getOrganization: getOrganization,
        getBooleanFlag: getBooleanFlag,
        getIntegerFlag: getIntegerFlag,
        getPermissions: getPermissions,
        getPermission: getPermission,
        getClaimValue: getClaimValue,
        getStringFlag: getStringFlag,
        getClaim: getClaim,
        getFlag: getFlag,
    };
};
exports.default = withAuthUtilities;
