"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var index_js_1 = require("../../oauth2-flows/index.js");
var with_auth_utilities_js_1 = __importDefault(require("./with-auth-utilities.js"));
var utilities = __importStar(require("../../utilities/index.js"));
var createAuthorizationCodeClient = function (options, isPKCE) {
    var client = !isPKCE
        ? new index_js_1.AuthorizationCode(options, options.clientSecret)
        : new index_js_1.AuthCodeWithPKCE(options);
    /**
     * Method makes use of the `createAuthorizationURL` method of the AuthCodeAbstract
     * client above to return login url.
     * @param {SessionManager} sessionManager
     * @param {LoginURLOptions} options
     * @returns {Promise<URL>} required authorization URL
     */
    var login = function (sessionManager, options) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, client.createAuthorizationURL(sessionManager, __assign({}, options))];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method makes use of the `createAuthorizationURL` method of the AuthCodeAbstract
     * client above to return registration url.
     * @param {SessionManager} sessionManager
     * @param {RegisterURLOptions} options
     * @returns {Promise<URL>} required authorization URL
     */
    var register = function (sessionManager, options) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, client.createAuthorizationURL(sessionManager, __assign(__assign({}, options), { start_page: 'registration' }))];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method makes use of the `createAuthorizationURL` method of the AuthCodeAbstract
     * client above to return registration url with the `is_create_org` query param
     * set to true.
     * @param {SessionManager} sessionManager
     * @param {CreateOrgURLOptions} options
     * @returns {Promise<URL>} required authorization URL
     */
    var createOrg = function (sessionManager, options) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, client.createAuthorizationURL(sessionManager, __assign(__assign({}, options), { start_page: 'registration', is_create_org: true }))];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method makes use of the `handleRedirectFromAuthDomain` method of the
     * `AuthCodeAbstract` client above to handle the redirection back to the app.
     * @param {SessionManager} sessionManager
     * @param {URL} callbackURL
     * @returns {Promise<void>}
     */
    var handleRedirectToApp = function (sessionManager, callbackURL) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, client.handleRedirectFromAuthDomain(sessionManager, callbackURL)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); };
    /**
     * Method acts as a wrapper around the `isAuthenticated` method provided by the
     * `AuthCodeAbstract` client created above.
     * @param {SessionManager} sessionManager
     * @returns {Promise<Boolean>}
     */
    var isAuthenticated = function (sessionManager) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, client.isAuthenticated(sessionManager)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method makes use of the `getUserProfile` method of the `AuthCodeAbstract` client
     * above to fetch the current user's information, raises exception if current user
     * is not authenticated.
     * @param {SessionManager} sessionManager
     * @returns {Promise<UserType>}
     */
    var getUserProfile = function (sessionManager) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, client.getUserProfile(sessionManager)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method extracts the current user's details from the current session, raises
     * exception if current user is not authenticated.
     * @param {SessionManager} sessionManager
     * @returns {Promise<UserType>}
     */
    var getUser = function (sessionManager) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, isAuthenticated(sessionManager)];
                case 1:
                    if (!(_a.sent())) {
                        throw new Error('Cannot get user details, no authentication credential found');
                    }
                    return [4 /*yield*/, utilities.getUserFromSession(sessionManager, client.tokenValidationDetails)];
                case 2: return [2 /*return*/, (_a.sent())];
            }
        });
    }); };
    /**
     * Method makes use of the `getToken` method of the `AuthCodeAbstract` client
     * to retrieve an access token.
     * @param sessionManager
     * @returns {Promise<string>}
     */
    var getToken = function (sessionManager) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, client.getToken(sessionManager)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method makes user of the `refreshTokens` method of the `AuthCodeAbstract` client
     * to use the refresh token to get new tokens
     * @param {SessionManager} sessionManager
     * @returns {Promise<OAuth2CodeExchangeResponse>}
     */
    var refreshTokens = function (sessionManager) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, client.refreshTokens(sessionManager)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
    /**
     * Method clears the current session and returns the logout URL, redirecting
     * to which will clear the user's session on the authorization server.
     * @param {SessionManager} sessionManager
     * @returns {URL}
     */
    var logout = function (sessionManager) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, sessionManager.destroySession()];
                case 1:
                    _a.sent();
                    return [2 /*return*/, new URL(client.logoutEndpoint)];
            }
        });
    }); };
    return __assign(__assign({}, (0, with_auth_utilities_js_1.default)(isAuthenticated, client.tokenValidationDetails)), { handleRedirectToApp: handleRedirectToApp, isAuthenticated: isAuthenticated, getUserProfile: getUserProfile, createOrg: createOrg, getToken: getToken, refreshTokens: refreshTokens, register: register, getUser: getUser, logout: logout, login: login });
};
exports.default = createAuthorizationCodeClient;
