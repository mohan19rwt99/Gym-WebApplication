"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTokenExpired = exports.getUserFromSession = exports.getAccessToken = exports.getRefreshToken = exports.commitTokensToSession = exports.commitTokenToSession = void 0;
var exceptions_js_1 = require("../exceptions.js");
var jose_1 = require("jose");
/**
 * Saves the provided token to the current session.
 * @param {SessionManager} sessionManager
 * @param {string} token
 * @param {TokenType} type
 */
var commitTokenToSession = function (sessionManager, token, type, validationDetails) { return __awaiter(void 0, void 0, void 0, function () {
    var key, e_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!!token) return [3 /*break*/, 2];
                return [4 /*yield*/, sessionManager.removeSessionItem(type)];
            case 1:
                _a.sent();
                return [2 /*return*/];
            case 2:
                if (!(type === 'access_token' || type === 'id_token')) return [3 /*break*/, 7];
                _a.label = 3;
            case 3:
                _a.trys.push([3, 6, , 7]);
                return [4 /*yield*/, validationDetails.keyProvider()];
            case 4:
                key = _a.sent();
                return [4 /*yield*/, (0, jose_1.jwtVerify)(token, key)];
            case 5:
                _a.sent();
                return [3 /*break*/, 7];
            case 6:
                e_1 = _a.sent();
                throw new exceptions_js_1.KindeSDKError(exceptions_js_1.KindeSDKErrorCode.INVALID_TOKEN_MEMORY_COMMIT, "Attempting to commit invalid ".concat(type, " token \"").concat(token, "\" to memory"));
            case 7: return [4 /*yield*/, sessionManager.setSessionItem(type, token)];
            case 8:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
exports.commitTokenToSession = commitTokenToSession;
/**
 * Saves the access, refresh and id tokens provided in the `TokenCollection`
 * object to the current session.
 * @param {SessionManager} sessionManager
 * @param tokens
 */
var commitTokensToSession = function (sessionManager, tokens, validationDetails) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, Promise.all([
                    (0, exports.commitTokenToSession)(sessionManager, tokens.refresh_token, 'refresh_token', validationDetails),
                    (0, exports.commitTokenToSession)(sessionManager, tokens.access_token, 'access_token', validationDetails),
                    (0, exports.commitTokenToSession)(sessionManager, tokens.id_token, 'id_token', validationDetails),
                ])];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
exports.commitTokensToSession = commitTokensToSession;
/**
 * Extracts the refresh token from current session returns null if the
 * token is not found.
 * @param {SessionManager} sessionManager
 * @returns {string | null}
 */
var getRefreshToken = function (sessionManager) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, sessionManager.getSessionItem('refresh_token')];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
exports.getRefreshToken = getRefreshToken;
/**
 * Extracts the access token from current session returns null if the
 * token is not found.
 * @param {SessionManager} sessionManager
 * @returns {string | null}
 */
var getAccessToken = function (sessionManager) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, sessionManager.getSessionItem('access_token')];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
exports.getAccessToken = getAccessToken;
/**
 * Extracts the user information from the current session returns null if
 * the token is not found.
 * @param {SessionManager} sessionManager
 * @returns {string | null}
 */
var getUserFromSession = function (sessionManager, validationDetails) { return __awaiter(void 0, void 0, void 0, function () {
    var idTokenString, idToken, _a, _b, user;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0: return [4 /*yield*/, sessionManager.getSessionItem('id_token')];
            case 1:
                idTokenString = (_d.sent());
                _a = jose_1.jwtVerify;
                _b = [idTokenString];
                return [4 /*yield*/, validationDetails.keyProvider()];
            case 2: return [4 /*yield*/, _a.apply(void 0, _b.concat([_d.sent(), { currentDate: new Date(0) }]))];
            case 3:
                idToken = _d.sent();
                user = {
                    family_name: idToken.payload.family_name,
                    given_name: idToken.payload.given_name,
                    picture: (_c = idToken.payload.picture) !== null && _c !== void 0 ? _c : null,
                    email: idToken.payload.email,
                    id: idToken.payload.sub,
                };
                return [2 /*return*/, user];
        }
    });
}); };
exports.getUserFromSession = getUserFromSession;
/**
 * Checks if the provided JWT token is valid (expired or not).
 * @param {string | null} token
 * @returns {boolean} is expired or not
 */
var isTokenExpired = function (token, validationDetails) { return __awaiter(void 0, void 0, void 0, function () {
    var currentUnixTime, tokenPayload, _a, _b, e_2;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (!token)
                    return [2 /*return*/, true];
                _c.label = 1;
            case 1:
                _c.trys.push([1, 4, , 5]);
                currentUnixTime = Math.floor(Date.now() / 1000);
                _a = jose_1.jwtVerify;
                _b = [token];
                return [4 /*yield*/, validationDetails.keyProvider()];
            case 2: return [4 /*yield*/, _a.apply(void 0, _b.concat([_c.sent()]))];
            case 3:
                tokenPayload = _c.sent();
                if (tokenPayload.payload.exp === undefined)
                    return [2 /*return*/, true];
                return [2 /*return*/, currentUnixTime >= tokenPayload.payload.exp];
            case 4:
                e_2 = _c.sent();
                return [2 /*return*/, true];
            case 5: return [2 /*return*/];
        }
    });
}); };
exports.isTokenExpired = isTokenExpired;
