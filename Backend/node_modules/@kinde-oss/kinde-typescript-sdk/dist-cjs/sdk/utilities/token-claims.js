"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUserOrganizations = exports.getPermissions = exports.getOrganization = exports.getPermission = exports.getClaim = exports.getClaimValue = void 0;
var jose_1 = require("jose");
/**
 * Method extracts the provided claim from the provided token type in the
 * current session.
 * @param {SessionManager} sessionManager
 * @param {string} claim
 * @param {ClaimTokenType} type
 * @returns {unknown | null}
 */
var getClaimValue = function (sessionManager, claim, type, validationDetails) {
    if (type === void 0) { type = 'access_token'; }
    return __awaiter(void 0, void 0, void 0, function () {
        var token, key, decodedToken, tokenPayload;
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, sessionManager.getSessionItem("".concat(type))];
                case 1:
                    token = (_b.sent());
                    return [4 /*yield*/, validationDetails.keyProvider()];
                case 2:
                    key = _b.sent();
                    return [4 /*yield*/, (0, jose_1.jwtVerify)(token, key, type === 'id_token' ? { currentDate: new Date(0) } : {})];
                case 3:
                    decodedToken = _b.sent();
                    tokenPayload = decodedToken.payload;
                    return [2 /*return*/, (_a = tokenPayload[claim]) !== null && _a !== void 0 ? _a : null];
            }
        });
    });
};
exports.getClaimValue = getClaimValue;
/**
 * Method extracts the provided claim from the provided token type in the
 * current session, the returned object includes the provided claim.
 * @param {SessionManager} sessionManager
 * @param {string} claim
 * @param {ClaimTokenType} type
 * @returns {{ name: string, value: unknown | null }}
 */
var getClaim = function (sessionManager, claim, type, validationDetails) { return __awaiter(void 0, void 0, void 0, function () {
    var _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = {
                    name: claim
                };
                return [4 /*yield*/, (0, exports.getClaimValue)(sessionManager, claim, type, validationDetails)];
            case 1: return [2 /*return*/, (_a.value = _b.sent(),
                    _a)];
        }
    });
}); };
exports.getClaim = getClaim;
/**
 * Method returns the organization code from the current session and returns
 * a boolean in the returned object indicating if the provided permission is
 * present in the session.
 * @param {SessionManager} sessionManager
 * @param {string} name
 * @returns {{ orgCode: string | null, isGranted: boolean }}
 */
var getPermission = function (sessionManager, name, validationDetails) { return __awaiter(void 0, void 0, void 0, function () {
    var permissions, isGranted, orgCode;
    var _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, (0, exports.getClaimValue)(sessionManager, 'permissions', 'access_token', validationDetails)];
            case 1:
                permissions = ((_a = (_b.sent())) !== null && _a !== void 0 ? _a : []);
                isGranted = permissions.some(function (p) { return p === name; });
                return [4 /*yield*/, (0, exports.getClaimValue)(sessionManager, 'org_code', 'access_token', validationDetails)];
            case 2:
                orgCode = (_b.sent());
                return [2 /*return*/, { orgCode: orgCode, isGranted: isGranted }];
        }
    });
}); };
exports.getPermission = getPermission;
/**
 * Method extracts the organization code from the current session.
 * @param {SessionManager} sessionManager
 * @returns {{ orgCode: string | null }}
 */
var getOrganization = function (sessionManager, validationDetails) { return __awaiter(void 0, void 0, void 0, function () {
    var _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = {};
                return [4 /*yield*/, (0, exports.getClaimValue)(sessionManager, 'org_code', 'access_token', validationDetails)];
            case 1: return [2 /*return*/, (_a.orgCode = (_b.sent()),
                    _a)];
        }
    });
}); };
exports.getOrganization = getOrganization;
/**
 * Method extracts all the permission and the organization code in the access
 * token in the current session.
 * @param {SessionManager} sessionManager
 * @returns {{ permissions: string[], orgCode: string | null }}
 */
var getPermissions = function (sessionManager, validationDetails) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, permissions, orgCode;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4 /*yield*/, Promise.all([
                    ((_b = (0, exports.getClaimValue)(sessionManager, 'permissions', 'access_token', validationDetails)) !== null && _b !== void 0 ? _b : []),
                    (0, exports.getClaimValue)(sessionManager, 'org_code', 'access_token', validationDetails),
                ])];
            case 1:
                _a = __read.apply(void 0, [_c.sent(), 2]), permissions = _a[0], orgCode = _a[1];
                return [2 /*return*/, {
                        permissions: permissions,
                        orgCode: orgCode,
                    }];
        }
    });
}); };
exports.getPermissions = getPermissions;
/**
 * Method extracts all organization codes from the id token in the current
 * session.
 * @param {SessionManager} sessionManager
 * @returns {{ orgCodes: string[] }}
 */
var getUserOrganizations = function (sessionManager, validationDetails) { return __awaiter(void 0, void 0, void 0, function () {
    var _a;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = {};
                return [4 /*yield*/, (0, exports.getClaimValue)(sessionManager, 'org_codes', 'id_token', validationDetails)];
            case 1: return [2 /*return*/, (_a.orgCodes = ((_b = (_c.sent())) !== null && _b !== void 0 ? _b : []),
                    _a)];
        }
    });
}); };
exports.getUserOrganizations = getUserOrganizations;
